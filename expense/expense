#!/usr/bin/env python
import sys
from datetime import date
from textwrap import dedent
import psycopg2
from psycopg2 import (
    DataError, IntegrityError, InterfaceError,
    OperationalError, ProgrammingError
)
from psycopg2.extras import DictCursor



def get_connection(dbname):
    """Gets a connection to the given database"""
    try:
        return psycopg2.connect(dbname=dbname)
    except OperationalError:
        print(f"Unable to retrieve a connection to: {dbname}. Exiting.")
        sys.exit(1)


def get_cursor(db_connection):
    """Gets a cursor to the given db_connection"""
    try:
        return db_connection.cursor(cursor_factory=DictCursor)
    except InterfaceError:
        print("Unable to initialize a cursor. Closing connection and exiting.")
        sys.exit(1)


def get_db_connection_and_cursor(dbname):
    """Attempts to get a connection and cursor to the given database"""
    connection = get_connection(dbname)
    cursor = get_cursor(connection)
    return connection, cursor


def execute_query(cursor, query, *query_args):
    """Attempts to execute the given SQL query using the given cursor"""
    try:
        cursor.execute(query, query_args)
    except (
        DataError, IntegrityError, InterfaceError,
        OperationalError, ProgrammingError) as e:
        print(e)
        sys.exit(1)


def add_expenses(cursor, args):
    """Inserts a new expense to the connected database"""
    if len(args) < 2:
        print("You must provide an amount and memo")
        sys.exit(1)

    try:
        amount = round(float(args[0]), 2)
    except ValueError:
        print("The amount must be a number")
        sys.exit(1)

    memo = args[1]
    created_on = date.today()

    query = dedent("""
        INSERT INTO expenses (amount, memo, created_on)
        VALUES (%s, %s, %s)
    """)

    execute_query(cursor, query, amount, memo, created_on)


def list_expenses(cursor):
    """Prints all expenses in a '|' delimited table"""
    query = "SELECT * FROM expenses"
    execute_query(cursor, query)
    expenses = cursor.fetchall()

    for expense in expenses:
        print(
            f"{expense['id']} | {expense['created_on']} | "
            f"{expense['amount']:>12} | {expense['memo']}"
        )


def display_help():
    """Prints a help menu"""
    print(dedent("""
        An expense recording system

        Commands:

        add AMOUNT MEMO - record a new expense
        clear - delete all expenses
        list - list all expenses
        delete NUMBER - remove expense with id NUMBER
        search QUERY - list expenses with a matching memo field
    """))


def handle_cmdline_args(cursor):
    """Retrieves and Processes cmdline arguments"""
    cmd, args = sys.argv[1], sys.argv[2:]
    if cmd:
        match cmd.lower():
            case "add":
                add_expenses(cursor, args)
            case "list":
                list_expenses(cursor)
    else:
        display_help()


if __name__ == "__main__":
    try:
        connection, cursor = get_db_connection_and_cursor(dbname="expense")
        with connection:
            with cursor:
                handle_cmdline_args(cursor)
    finally:
        connection.close()
