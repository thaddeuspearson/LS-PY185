#!/usr/bin/env python
import psycopg2
from psycopg2 import OperationalError, InterfaceError
from psycopg2.extras import DictCursor
from sys import argv, exit
from textwrap import dedent


def get_connection(dbname):
    """Gets a connection to the given database"""
    try:
        return psycopg2.connect(dbname=dbname)
    except OperationalError:
        exit(f"Unable to retrieve a connection to: {dbname}. Exiting.")


def get_cursor(db_connection):
    """Gets a cursor to the given db_connection"""
    try:
        return db_connection.cursor(cursor_factory=DictCursor)
    except InterfaceError:
        exit(
            "Unable to initialize a cursor. "
            "Closing database connection and Exiting."
        )


def get_db_connection_and_cursor(dbname):
    """Attempts to get a connection and cursor to the given database"""
    connection = get_connection(dbname="expense")
    cursor = get_cursor(connection)
    return connection, cursor


def execute_select_query(db_cursor, query):
    """executes a select SQL query  using the given db_cursor"""
    cursor.execute(query)
    return db_cursor.fetchall()


def list_expenses(db_cursor):
    """Prints all expenses in a '|' delimited table"""
    query = "SELECT * FROM expenses"
    expenses = execute_select_query(cursor, query)

    for expense in expenses:
        print(
            f"{expense['id']} | {expense['created_on']} | "
            f"{expense['amount']:>12} | {expense['memo']}"
        )


def display_help():
    """Prints a help menu"""
    print(dedent("""
        An expense recording system

        Commands:

        add AMOUNT MEMO - record a new expense
        clear - delete all expenses
        list - list all expenses
        delete NUMBER - remove expense with id NUMBER
        search QUERY - list expenses with a matching memo field
    """))


def handle_cmdline_args():
    """Retrieves and Processes cmdline arguments"""
    if len(argv) > 1:
        match argv[1].lower():
            case "list":
                list_expenses(cursor)
    else:
        display_help()


if __name__ == "__main__":
    try:
        connection, cursor = get_db_connection_and_cursor(dbname="expense")
        handle_cmdline_args()
        # if argv[0]:
        #     match argv[1].lower():
        #         case "list":
        #             list_expenses(cursor)
        #         case "help":
        #             display_help()
    finally:
        connection.close()
